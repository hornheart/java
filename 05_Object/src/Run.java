
public class Run {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}

/*
 * 
 * 
 * package
 * 클래스 간의 공간적 충돌이나 접근방법의 층졸을 막기위해
 * 저장 위치를 
 */
*




// 
      /*
       * 1. 객체지향 언어 : "객체"를 "지향"하는 언어로 "객체중심"으로 돌아간다고 생각하면 된다.
       * 
       * 2. 객체란 : 현실세계에 독립적으로 존재 (목적이 있고 가치가 있고 의미가 있는 것) 하는 모든 것들을 의미 (유형, 무형, 개념....)
       *            현실세계에서는 객체들간의 상호작용으로 돌아감
       *            
       * 3. 객체지향 프로그래밍 : 현실 세계의 객체들간의 상호작용
       *                     프로그래밍을 통해서 가상 세계로 구현하는 과정
       *                     
       * 4. 구현하고자 하는 프로그램 상의 필요한 객체들을 만들기 위해서 ( 즉, 생성하기 위해)
       *  :  클래스라는 틀을 먼저 만들어야 한다!! (클래스란? 각 객체들의 속성(데이터) 들을 담아낼 그릇 같은 존재)
       *  
       * 5. 추상화 과정
       *  1) 내가 구현하고자 하는 프로그램에서 필요한 객체들을 생각해 볼 것 
       *  2) 그 객체들이 가지는 공통적인 속성 및 기능을 추출
       *  3) 추출한 것들을 가지고 내가 구현하고자 했던 프로그램의 "실질적인 목적"에 맞춰 불필요한 속성, 기능을 제거할 것
       *  4) 그렇게 최종적으로 추려진 속성들을 어떤 자료형으로, 어떤 변수명으로 사용할 것인지 정의
       *  
       *  예 ) 학생 관리 프로그램
       *   1. 학생관련객체 (홍길동학생, 김연아학생, 최지원학생...)
       *   2. 공통적인 속정 및 기능들  (이름, 나이, 주소, 전화번호, 키, 달리기 속도, 머리색, 발사이즈, 먹는나, 잔다, 화장실간다...)
       *   3. 학생 "인적사항"을 관리하는 프로그램 : 이름, 나이, 주소, 전화번호, 학년 ,반
       *      학생 "건강"을 관리하는 프로그램 : 이름, 학년, 반, 키, 몸무게, 달리기 속도, 먹는다
       *      학생 "성적"을 관리하는 프로그램 : 이름, 학년, 반, 국어점수, 영어점수, 수학점수
       *      
       *      ==> 결국 '이름, 나이, 키'라는 가정하에
       *      
       *   4. 이름 : String name;
       *      나이 : int age;
       *      키 : double height;
       *      
       *
       * 6. 위의 선정된 것들을 가지고 본격적인 프로그램을 할예정이나,
       *  1) "변수" 만으로 프로그램을 한다면?
       *  
       *        * 변수 = 하나의 자료형의 하나의 값만을 보관할 수 있음
       *        홍길동이라는 학생 객체를 만들어내기 위해서는 -> string name1 = "홍길동"; int age1 = 20; double height1 = 163.2;
       *        김말똥이라는 학생 객체를 만들어 내기 위해   -> string name2 = "김말똥"; int age1 = 30; double height1 = 164.2;
       *        ...등등의 수백만이 될 수 있는 정보를 기입해야 한다
       *        
       *  2) "배열"로 프로그래밍을 한다면?
       *  *배열 - 하나의 자료형의 여러개의 값들을 보관할 수 있음
       *  학생들의 이름을 보관하는 배열 String[] name = {"홍길동", "김말똥"...}
       *  학생들의 나이를 보관하는 배열 int[] age = {20, 30,...}
       *  ...
       *  
       *  **문제가 발생될 수 있음!!!!!**
       *  ==>기존의 정보를 지울 때 정보들이 섞이거나 바뀔 수 있다.
       *  혹은, 새로운 정보를 기록할 때 기존의 배열 복사와 추가의 과정이 필요하다.
       *  
       *  3) 그래서@_@ 구조체가 나왔다!!!
       *  *구조체*
       *  여러개의 자료형 값을 보관할 수 있다.
       *  String값을 보관하고 int값도 보관할 수 있다. 
       *  동시에 double도 함께 저장가능
       *  ==> 나만의 자료형 집합이 가능 -> 자바에서 이런 구조체 개념을 조금 더 확장해서 클래스라는
       *  
       *          
       ******캡슐화 : 추상화를 통해서 정의된 속성들과 기능들을 하나로 묶어 관리하는 기법 중 하나로
       *            클래스에서 가장 중요한 목적인 "데이터의 접근제한(정보은닉)"을 원칙으로
       *            외부로부터 "데이커의 접근을 막고"
       *            대신에 "데이터를 간접적으로 처리 (값을 대입, 값을 돌려주거나)" 할 메소드들을 클래스 내부에 작성해서 관리           
       *          
       */
public class Run {
	public static void main(String[] args) {
		//클래스를 이용해서 학생 객체 만들어 보기
		//자바ㅏ에서 객체로 만들기 위해서는 new라는 키워드를 통해 메모리공간을 할당
		Student choi = new Student("최지원", 17, 187.2);
		Student kim = new Student("김소향", 20, 165.2);
		
		choi.print();
		kim.print();
		
		// . : 해당 객체에 접근할 때 사용
		
		choi.name = "최배달";
		choi.age = 90;
		choi.print();
		
		System.out.println("안녕하세요. " + choi.age + "살 " + choi.name + )
		
		choi.print();
		choi.print("남자");
	}
}